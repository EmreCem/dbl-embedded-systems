interface ITape //our tape of the Turing machine with 4 slots
{
	in bool changing(); //is the binary value currently changing or representing
	in void moveLeft(); 
	in void moveRight(); 
	out void stop(); //the tape has reached the correct position for changing a bit
	behaviour
	{
		enum State {waiting, moving};
		State state = State.waiting;
		on changing: reply (true);
		on changing: reply (false);
		on moveLeft: state = State.moving;
  		on moveRight: state = State.moving;
  		[state.moving] on optional: {stop; state = State.waiting;}
	}
	
}

interface IHead //the read/write head of the Turing machine
{
  	in bool bit(); //check what bit is in position
  	in void push(); //take a certain bit into this position
  	in void pull(); //remove the bit from this position
  	behaviour
  {
  	enum State {single_state};
  	State state = State.single_state;
  	on bit: reply (true);
  	on bit: reply (false); 
  	on push: state = State.single_state;
  	on pull: state = State.single_state;
  }
}

component ICountingMachine 
{
	provides IHead ihead;
	provides ITape itape;
	
	behaviour
	{
		enum State {empty, white_block, black_block, moving, stopping};
		State state = State.empty;
		
		}
		
}

interface OutputPin 
{
  enum State {High,Low,Undefined};
  	
  in void pin_high();
  in void pin_low();

  behaviour
  {
  	State state = State.Undefined;
  	
  	on pin_high: state = State.High;
  	on pin_low: state = State.Low;
  }
}

interface InputPin 
{
  in bool read_pin();   

  behaviour
  {
    on read_pin: reply (true);
    on read_pin: reply (false);
  }
}